CREATE DATABASE ELEARNING;
USE ELEARNING;


CREATE TABLE USERS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    USERNAME VARCHAR(50) NOT NULL UNIQUE,
    PASSWORD VARCHAR(255) NOT NULL,
    EMAIL VARCHAR(100) NOT NULL UNIQUE,
    ROLE ENUM('STUDENT', 'INSTRUCTOR', 'ADMIN') NOT NULL
);

CREATE TABLE INSTRUCTORS (
    INSTRUCTOR_ID INT AUTO_INCREMENT PRIMARY KEY,
    USER_ID INT,
    USERNAME VARCHAR(50) NOT NULL UNIQUE,
    PASSWORD VARCHAR(255) NOT NULL,
    EMAIL VARCHAR(100) NOT NULL UNIQUE,
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID)
);

CREATE TABLE STUDENTS (
    STUDENT_ID INT AUTO_INCREMENT PRIMARY KEY,
    USER_ID INT,
    USERNAME VARCHAR(50) NOT NULL UNIQUE,
    PASSWORD VARCHAR(255) NOT NULL,
    EMAIL VARCHAR(100) NOT NULL UNIQUE,
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID)
);

CREATE TABLE COURSES (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    TITLE VARCHAR(100) NOT NULL,
    DESCRIPTION TEXT,
    INSTRUCTOR_ID INT,
    FOREIGN KEY (INSTRUCTOR_ID) REFERENCES INSTRUCTORS(INSTRUCTOR_ID)
);

CREATE TABLE MODULES (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    TITLE VARCHAR(100) NOT NULL,
    CONTENT TEXT,
    COURSE_ID INT,
    DESCRIPTION TEXT,
    FOREIGN KEY (COURSE_ID) REFERENCES COURSES(ID)
);

CREATE TABLE ENROLLMENTS (
    USER_ID INT,
    COURSE_ID INT,
    ENROLLMENT_DATE DATETIME DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (USER_ID, COURSE_ID),
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID),
    FOREIGN KEY (COURSE_ID) REFERENCES COURSES(ID)
);

CREATE TABLE FEEDBACK (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    USER_ID INT,
    COURSE_ID INT,
    RATING INT NOT NULL,
    COMMENT TEXT,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID),
    FOREIGN KEY (COURSE_ID) REFERENCES COURSES(ID)
);
CREATE TRIGGER VALIDATE_COURSE_DATA_INSERT
BEFORE INSERT ON COURSES
FOR EACH ROW
BEGIN
    IF LENGTH(NEW.TITLE) < 5 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'COURSE TITLE MUST BE AT LEAST 5 CHARACTERS LONG.';
    END IF;

    IF LENGTH(NEW.DESCRIPTION) < 10 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'COURSE DESCRIPTION MUST BE AT LEAST 10 CHARACTERS LONG.';
    END IF;
END;

DELIMITER $$
CREATE TRIGGER CHECK_DUPLICATE_USERNAME
BEFORE INSERT ON USERS
FOR EACH ROW
BEGIN
    -- CHECK IF THE USERNAME ALREADY EXISTS
    DECLARE DUPLICATE_USERNAME INT;

    SELECT COUNT(*)
    INTO DUPLICATE_USERNAME
    FROM USERS
    WHERE USERNAME = NEW.USERNAME;

    -- IF A DUPLICATE USERNAME EXISTS, RAISE AN ERROR
    IF DUPLICATE_USERNAME > 0 THEN
        SIGNAL SQLSTATE '45000' 
        SET MESSAGE_TEXT = CONCAT('DUPLICATE ENTRY FOR USERNAME: ', NEW.USERNAME);
    END IF;
END $$

DELIMITER ;


CREATE DEFINER=ROOT@LOCALHOST FUNCTION GET_COURSES_FOR_USER(USER_ID INT) 
RETURNS JSON DETERMINISTIC
BEGIN
  DECLARE COURSE_LIST JSON;

  SELECT JSON_ARRAYAGG(
    JSON_OBJECT(
      'COURSE_ID', C.ID,
      'COURSE_TITLE', C.TITLE,
      'COURSE_DESCRIPTION', C.DESCRIPTION
    )
  ) INTO COURSE_LIST
  FROM COURSES C
  JOIN ENROLLMENTS E ON C.ID = E.COURSE_ID
  WHERE E.USER_ID = USER_ID;

  RETURN IFNULL(COURSE_LIST, JSON_ARRAY());
END


CREATE DEFINER=ROOT@LOCALHOST PROCEDURE GET_COURSES_BY_INSTRUCTOR(
    IN INSTRUCTORID INT
)
BEGIN
    SELECT ID AS COURSE_ID,
           TITLE AS COURSE_TITLE,
           DESCRIPTION AS COURSE_DESCRIPTION
    FROM COURSES
    WHERE INSTRUCTOR_ID = INSTRUCTORID;
END



SELECT COURSES.TITLE, COUNT(ENROLLMENTS.USER_ID) AS STUDENT_COUNT
FROM COURSES
LEFT JOIN ENROLLMENTS ON COURSES.ID = ENROLLMENTS.COURSE_ID
GROUP BY COURSES.TITLE;
Join Query
Returns instructor made courses
SELECT COURSES.TITLE, USERS.USERNAME
FROM COURSES
INNER JOIN USERS ON COURSES.INSTRUCTOR_ID = USERS.ID
WHERE USERS.ROLE = 'INSTRUCTOR'; 


SELECT USERS.USERNAME AS STUDENT, COURSES.TITLE
FROM ENROLLMENTS
INNER JOIN USERS ON ENROLLMENTS.USER_ID = USERS.ID
INNER JOIN COURSES ON ENROLLMENTS.COURSE_ID = COURSES.ID
WHERE USERS.ROLE = 'STUDENT';

SELECT TITLE
FROM COURSES
WHERE ID = (
    SELECT COURSE_ID
    FROM ENROLLMENTS
    GROUP BY COURSE_ID
    ORDER BY COUNT(USER_ID) DESC
    LIMIT 1
);
